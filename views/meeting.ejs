<!DOCTYPE html>
<html>
<head>
  <title>Zoom Clone Meeting</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
  <style>
    body {
      background: #121212;
      color: white;
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      justify-content: center;
    }

    .video-container {
      position: relative;
      width: 45%;
    }

    video {
      width: 100%;
      border-radius: 10px;
      border: 2px solid #333;
    }

    .username-label {
      position: absolute;
      bottom: 10px;
      right: 10px;
      background: rgba(0, 0, 0, 0.6);
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 14px;
    }

    .controls {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
      z-index: 999;
    }

    .controls button {
      background: #1f1f1f;
      color: white;
      border: none;
      padding: 12px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.3s ease;
    }

    .controls button:hover {
      background: #333;
    }

    .chat-box {
      position: fixed;
      right: 20px;
      bottom: 80px;
      width: 250px;
      max-height: 300px;
      background: #1e1e1e;
      border-radius: 10px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .chat-box textarea {
      resize: none;
      border: none;
      padding: 10px;
      font-size: 14px;
      background: #1e1e1e;
      color: white;
    }

    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
      font-size: 14px;
    }

    .chat-input {
      border-top: 1px solid #333;
      display: flex;
    }

    .chat-input input {
      flex: 1;
      padding: 10px;
      border: none;
      font-size: 14px;
      background: #2b2b2b;
      color: white;
    }

    .chat-input button {
      padding: 10px;
      background: #4CAF50;
      border: none;
      color: white;
      cursor: pointer;
    }

    @media (max-width: 768px) {
      .video-container {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="video-container">
    <video id="localVideo" autoplay muted></video>
    <div class="username-label"><%= username %> (You)</div>
  </div>
  <div class="video-container">
    <video id="remoteVideo" autoplay></video>
    <div class="username-label">Participant</div>
  </div>

  <div class="controls">
    <button onclick="toggleMic()"><i class="fas fa-microphone"></i></button>
    <button onclick="toggleCamera()"><i class="fas fa-video"></i></button>
    <button onclick="shareScreen()"><i class="fas fa-desktop"></i></button>
    <button onclick="copyLink()"><i class="fas fa-link"></i></button>
    <form action="/user" method="get">
      <button type="submit"><i class="fas fa-phone-slash"></i></button>
    </form>
  </div>

  <div class="chat-box">
    <div class="chat-messages" id="chatMessages"></div>
    <div class="chat-input">
      <input type="text" id="chatInput" placeholder="Type a message..." />
      <button onclick="sendMessage()">Send</button>
    </div>
  </div>

  <audio id="joinSound" src="/sounds/join.mp3"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const roomId = "<%= roomId %>";
    const username = "<%= username %>";
    
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const joinSound = document.getElementById('joinSound');
    const chatMessages = document.getElementById('chatMessages');

    let localStream;
    let peerConnection;
    let remoteSocketId;
    let isCaller = false;

    const config = {
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' }
      ]
    };

    // Initialize connection
    async function init() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({ 
          video: true, 
          audio: true 
        });
        localVideo.srcObject = localStream;
        
        // Join room after media is ready
        socket.emit('join', roomId);
        
        // Create peer connection immediately
        createPeerConnection();
      } catch (error) {
        console.error('Media access error:', error);
        alert('Please allow camera and microphone access.');
      }
    }

    function createPeerConnection() {
      console.log('Creating new peer connection');
      peerConnection = new RTCPeerConnection(config);

      // Add local stream tracks
      localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
        console.log('Added local track:', track.kind);
      });

      // Remote stream handler
      peerConnection.ontrack = event => {
        console.log('Received remote track:', event.track.kind);
        if (!remoteVideo.srcObject) {
          remoteVideo.srcObject = new MediaStream();
        }
        remoteVideo.srcObject.addTrack(event.track);
      };

      // ICE candidate handler
      peerConnection.onicecandidate = event => {
        if (event.candidate) {
          console.log('Sending ICE candidate to', remoteSocketId);
          socket.emit('ice-candidate', {
            to: remoteSocketId,
            candidate: event.candidate
          });
        } else {
          console.log('All ICE candidates have been sent');
        }
      };

      // ICE connection state change handler
      peerConnection.oniceconnectionstatechange = () => {
        console.log('ICE connection state:', peerConnection.iceConnectionState);
        if (peerConnection.iceConnectionState === 'failed' ||
            peerConnection.iceConnectionState === 'disconnected') {
          restartIce();
        }
      };

      peerConnection.onnegotiationneeded = async () => {
        console.log('Negotiation needed');
        if (isCaller) {
          try {
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            socket.emit('offer', { to: remoteSocketId, offer });
          } catch (err) {
            console.error('Error creating offer:', err);
          }
        }
      };
    }

    function restartIce() {
      console.log('Restarting ICE...');
      if (peerConnection) {
        peerConnection.restartIce();
      }
    }

    // Socket event handlers
    socket.on('user-joined', async id => {
      console.log('User joined:', id);
      if (remoteSocketId) {
        console.log('Already in call with', remoteSocketId);
        return;
      }
      
      remoteSocketId = id;
      isCaller = true;
      
      try {
        console.log('Creating offer as caller');
        const offer = await peerConnection.createOffer({
          offerToReceiveAudio: true,
          offerToReceiveVideo: true
        });
        await peerConnection.setLocalDescription(offer);
        socket.emit('offer', { to: id, offer });
        joinSound.play();
      } catch (error) {
        console.error('Offer creation error:', error);
      }
    });

    socket.on('offer', async ({ offer, from }) => {
      console.log('Received offer from', from);
      if (remoteSocketId && remoteSocketId !== from) {
        console.log('Already in call with another peer');
        return;
      }
      
      remoteSocketId = from;
      isCaller = false;
      
      try {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        console.log('Remote description set');
        
        const answer = await peerConnection.createAnswer({
          offerToReceiveAudio: true,
          offerToReceiveVideo: true
        });
        await peerConnection.setLocalDescription(answer);
        socket.emit('answer', { to: from, answer });
      } catch (error) {
        console.error('Answer handling error:', error);
      }
    });

    socket.on('answer', async ({ answer }) => {
      console.log('Received answer');
      try {
        if (peerConnection.signalingState !== 'stable') {
          await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
          console.log('Answer applied successfully');
        }
      } catch (error) {
        console.error('Answer application error:', error);
      }
    });

    socket.on('ice-candidate', async ({ candidate }) => {
      try {
        if (candidate && peerConnection.remoteDescription) {
          console.log('Adding ICE candidate');
          await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
        }
      } catch (error) {
        console.error('ICE candidate error:', error);
      }
    });

    socket.on('user-left', id => {
      if (id === remoteSocketId) {
        console.log('Remote user left');
        if (remoteVideo.srcObject) {
          remoteVideo.srcObject.getTracks().forEach(track => track.stop());
          remoteVideo.srcObject = null;
        }
        remoteSocketId = null;
        isCaller = false;
      }
    });

    // Chat functions
    socket.on('chat', ({ msg, from }) => {
      const sender = from === socket.id ? 'You' : 'Participant';
      appendMessage(`${sender}: ${msg}`);
    });

    function sendMessage() {
      const input = document.getElementById('chatInput');
      const msg = input.value.trim();
      if (!msg) return;

      socket.emit('chat', { roomId, msg });
      appendMessage(`You: ${msg}`);
      input.value = '';
      input.focus();
    }

    function appendMessage(msg) {
      const div = document.createElement('div');
      div.textContent = msg;
      chatMessages.appendChild(div);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Initialize the app
    init();

    // UI control functions
    function toggleMic() {
      const audioTracks = localStream.getAudioTracks();
      audioTracks.forEach(track => {
        track.enabled = !track.enabled;
      });
    }

    function toggleCamera() {
      const videoTracks = localStream.getVideoTracks();
      videoTracks.forEach(track => {
        track.enabled = !track.enabled;
      });
    }

    async function shareScreen() {
      try {
        const screenStream = await navigator.mediaDevices.getDisplayMedia({ 
          video: true,
          audio: false 
        });
        
        // Replace video track
        const videoTrack = screenStream.getVideoTracks()[0];
        const sender = peerConnection.getSenders().find(s => 
          s.track.kind === 'video'
        );
        
        if (sender) {
          sender.replaceTrack(videoTrack);
        }
        
        // Handle when user stops sharing
        videoTrack.onended = () => {
          const localVideoTrack = localStream.getVideoTracks()[0];
          if (sender) {
            sender.replaceTrack(localVideoTrack);
          }
        };
      } catch (error) {
        console.error('Screen sharing error:', error);
      }
    }

    function copyLink() {
      const meetingUrl = `${window.location.origin}/room/${roomId}`;
      navigator.clipboard.writeText(meetingUrl)
        .then(() => alert('Meeting link copied to clipboard!'))
        .catch(() => prompt('Copy this link:', meetingUrl));
    }
</script>
</body>
</html>
