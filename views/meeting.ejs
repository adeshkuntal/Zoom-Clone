<!DOCTYPE html>
<html>
<head>
  <title>Zoom Clone Meeting</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
  <style>
    body {
      background: #121212;
      color: white;
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      justify-content: center;
    }

    .video-container {
      position: relative;
      width: 45%;
    }

    video {
      width: 100%;
      border-radius: 10px;
      border: 2px solid #333;
    }

    .username-label {
      position: absolute;
      bottom: 10px;
      right: 10px;
      background: rgba(0, 0, 0, 0.6);
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 14px;
    }

    .controls {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
      z-index: 999;
    }

    .controls button {
      background: #1f1f1f;
      color: white;
      border: none;
      padding: 12px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.3s ease;
    }

    .controls button:hover {
      background: #333;
    }

    .chat-box {
      position: fixed;
      right: 20px;
      bottom: 80px;
      width: 250px;
      max-height: 300px;
      background: #1e1e1e;
      border-radius: 10px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .chat-box textarea {
      resize: none;
      border: none;
      padding: 10px;
      font-size: 14px;
      background: #1e1e1e;
      color: white;
    }

    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
      font-size: 14px;
    }

    .chat-input {
      border-top: 1px solid #333;
      display: flex;
    }

    .chat-input input {
      flex: 1;
      padding: 10px;
      border: none;
      font-size: 14px;
      background: #2b2b2b;
      color: white;
    }

    .chat-input button {
      padding: 10px;
      background: #4CAF50;
      border: none;
      color: white;
      cursor: pointer;
    }

    @media (max-width: 768px) {
      .video-container {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="video-container">
    <video id="localVideo" autoplay muted></video>
    <div class="username-label"><%= username %> (You)</div>
  </div>
  <div class="video-container">
    <video id="remoteVideo" autoplay></video>
    <div class="username-label">Participant</div>
  </div>

  <div class="controls">
    <button onclick="toggleMic()"><i class="fas fa-microphone"></i></button>
    <button onclick="toggleCamera()"><i class="fas fa-video"></i></button>
    <button onclick="shareScreen()"><i class="fas fa-desktop"></i></button>
    <button onclick="copyLink()"><i class="fas fa-link"></i></button>
    <form action="/user" method="get">
      <button type="submit"><i class="fas fa-phone-slash"></i></button>
    </form>
  </div>

  <div class="chat-box">
    <div class="chat-messages" id="chatMessages"></div>
    <div class="chat-input">
      <input type="text" id="chatInput" placeholder="Type a message..." />
      <button onclick="sendMessage()">Send</button>
    </div>
  </div>

  <audio id="joinSound" src="/sounds/join.mp3"></audio>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const roomId = "<%= roomId %>";
    socket.emit('join', roomId); // Emit join only after page loads

    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const joinSound = document.getElementById('joinSound');

    let localStream;
    let peerConnection;
    let remoteSocketId;

    const config = {
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    };

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then(stream => {
        localVideo.srcObject = stream;
        localStream = stream;
        createPeerConnection(); // ✅ Ensure peer connection created after local media is ready
      })
      .catch(error => alert('Please allow camera and microphone access.'));

    function createPeerConnection() {
      peerConnection = new RTCPeerConnection(config);

      localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
      });

      peerConnection.ontrack = event => {
        remoteVideo.srcObject = event.streams[0];
      };

      peerConnection.onicecandidate = event => {
        if (event.candidate && remoteSocketId) {
          socket.emit('ice-candidate', {
            to: remoteSocketId,
            candidate: event.candidate
          });
        }
      };
    }

    // ✅ New user joins
    socket.on('user-joined', async id => {
      remoteSocketId = id;
      if (!peerConnection) createPeerConnection();

      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit('offer', { to: id, offer });

      joinSound.play();
    });

    // ✅ Received offer from other user
    socket.on('offer', async ({ offer, from }) => {
      remoteSocketId = from;
      if (!peerConnection) createPeerConnection();

      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
      socket.emit('answer', { to: from, answer });
    });

    socket.on('answer', async ({ answer }) => {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on('ice-candidate', async ({ candidate }) => {
      if (candidate) {
        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
      }
    });

    // ✅ Chat functions
    function sendMessage() {
      const input = document.getElementById("chatInput");
      const msg = input.value;
      if (!msg) return;

      socket.emit("chat", { roomId, msg }); // scoped to room
      appendMessage("You: " + msg);
      input.value = "";
    }

    socket.on("chat", ({ msg }) => {
      appendMessage("User: " + msg);
    });

    function appendMessage(msg) {
      const div = document.createElement("div");
      div.textContent = msg;
      document.getElementById("chatMessages").appendChild(div);
    }
</script>
</body>
</html>
